window.isMobile = !1;
if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
    window.isMobile = !0
}
window.isSafari = !1;
if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
    window.isSafari = !0
}
window.isSafariVersion = '';
if (window.isSafari) {
    var version = (navigator.appVersion).match(/Version\/(\d+)\.(\d+)\.?(\d+)? Safari/);
    if (version !== null) {
        window.isSafariVersion = [parseInt(version[1], 10), parseInt(version[2], 10), parseInt(version[3] || 0, 10)]
    }
}

function t_throttle(fn, threshhold, scope) {
    var last;
    var deferTimer;
    threshhold || (threshhold = 250);
    return function() {
        var context = scope || this;
        var now = +new Date();
        var args = arguments;
        if (last && now < last + threshhold) {
            clearTimeout(deferTimer);
            deferTimer = setTimeout(function() {
                last = now;
                fn.apply(context, args)
            }, threshhold)
        } else {
            last = now;
            fn.apply(context, args)
        }
    }
}

function t390_initPopup(recId) {
    var rec = document.getElementById('rec' + recId);
    if (!rec) return;
    var container = rec.querySelector('.t390');
    if (!container) return;
    rec.setAttribute('data-animationappear', 'off');
    rec.style.opacity = 1;
    var popup = rec.querySelector('.t-popup');
    var popupTooltipHook = popup.getAttribute('data-tooltip-hook');
    var analitics = popup.getAttribute('data-track-popup');
    var popupCloseBtn = popup.querySelector('.t-popup__close');
    var hrefs = rec.querySelectorAll('a[href*="#"]');
    var escapeEvent = t390_escClosePopup.bind(this, recId);
    if (popupTooltipHook) {
        t_onFuncLoad('t_popup__addAttributesForAccessibility', function() {
            t_popup__addAttributesForAccessibility(popupTooltipHook)
        });
        document.addEventListener('click', function(event) {
            var target = event.target;
            var href = target.closest('a[href="' + popupTooltipHook + '"]') ? target : !1;
            if (!href) return;
            event.preventDefault();
            t390_showPopup(recId, escapeEvent);
            t_onFuncLoad('t_popup__resizePopup', function() {
                t_popup__resizePopup(recId)
            });
            t390__lazyLoad();
            if (analitics && window.Tilda) {
                Tilda.sendEventToStatistics(analitics, popupTooltipHook)
            }
        });
        t_onFuncLoad('t_popup__addClassOnTriggerButton', function() {
            t_popup__addClassOnTriggerButton(document, popupTooltipHook)
        })
    }
    popup.addEventListener('scroll', t_throttle(function() {
        t390__lazyLoad()
    }));
    popup.addEventListener('click', function(event) {
        if (event.target === this) t390_closePopup(recId, escapeEvent)
    });
    popupCloseBtn.addEventListener('click', function() {
        t390_closePopup(recId, escapeEvent)
    });
    for (var i = 0; i < hrefs.length; i++) {
        hrefs[i].addEventListener('click', function() {
            var url = this.getAttribute('href');
            if (!url || url.substring(0, 7) != '#price:') {
                t390_closePopup(recId, escapeEvent);
                if (!url || url.substring(0, 7) == '#popup:') {
                    setTimeout(function() {
                        if (typeof t_triggerEvent === 'function') t_triggerEvent(document.body, 'popupShowed');
                        document.body.classList.add('t-body_popupshowed')
                    }, 300)
                }
            }
        })
    }
    var curPath = window.location.pathname;
    var curFullPath = window.location.origin + curPath;
    var isAndroid = /(android)/i.test(navigator.userAgent);
    if (isAndroid) {
        var selects = 'a[href^="#"]:not([href="#"]):not([href^="#price"]):not([href^="#popup"]):not([href^="#prodpopup"]):not([href^="#order"]):not([href^="#!"]),' + 'a[href^="' + curPath + '#"]:not([href*="#!/tproduct/"]):not([href*="#!/tab/"]):not([href*="#popup"]),' + 'a[href^="' + curFullPath + '#"]:not([href*="#!/tproduct/"]):not([href*="#!/tab/"]):not([href*="#popup"])';
        var selectors = rec.querySelectorAll(selects);
        for (var i = 0; i < selectors.length; i++) {
            selectors[i].addEventListener('click', function(event) {
                var hash = this.hash.trim();
                if (window.location.hash) {
                    setTimeout(function() {
                        window.location.href = hash
                    }, 50)
                }
            })
        }
    }

    function t390_escClosePopup(recId) {
        if (arguments[1].key === 'Escape') t390_closePopup(recId, escapeEvent)
    }
}

function t390_showPopup(recId, escapeEvent) {
    var rec = document.getElementById('rec' + recId);
    if (!rec) return;
    var container = rec.querySelector('.t390');
    if (!container) return;
    var windowWidth = window.innerWidth;
    var screenMin = rec.getAttribute('data-screen-min');
    var screenMax = rec.getAttribute('data-screen-max');
    if (screenMin && windowWidth < parseInt(screenMin, 10)) return;
    if (screenMax && windowWidth > parseInt(screenMax, 10)) return;
    var popup = rec.querySelector('.t-popup');
    var documentBody = document.body;
    t_onFuncLoad('t_popup__showPopup', function() {
        t_popup__showPopup(popup)
    });
    if (typeof t_triggerEvent === 'function') t_triggerEvent(document.body, 'popupShowed');
    documentBody.classList.add('t-body_popupshowed');
    documentBody.classList.add('t390__body_popupshowed');
    document.addEventListener('keydown', escapeEvent)
}

function t390_closePopup(recId, escapeEvent) {
    var rec = document.getElementById('rec' + recId);
    var popup = rec.querySelector('.t-popup');
    var popupActive = document.querySelector('.t-popup.t-popup_show');
    if (popup === popupActive) {
        if (typeof t_triggerEvent === 'function') t_triggerEvent(document.body, 'popupHidden');
        document.body.classList.remove('t-body_popupshowed');
        document.body.classList.remove('t390__body_popupshowed')
    }
    popup.classList.remove('t-popup_show');
    t_onFuncLoad('t_popup__addFocusOnTriggerButton', function() {
        t_popup__addFocusOnTriggerButton()
    });
    setTimeout(function() {
        var popupHide = document.querySelectorAll('.t-popup:not(.t-popup_show)');
        for (var i = 0; i < popupHide.length; i++) {
            popupHide[i].style.display = 'none'
        }
    }, 300);
    document.removeEventListener('keydown', escapeEvent)
}

function t390_sendPopupEventToStatistics(popupName) {
    var virtPage = '/tilda/popup/';
    var virtTitle = 'Popup: ';
    if (popupName.substring(0, 7) == '#popup:') {
        popupName = popupName.substring(7)
    }
    virtPage += popupName;
    virtTitle += popupName;
    if (window.Tilda && typeof Tilda.sendEventToStatistics == 'function') {
        Tilda.sendEventToStatistics(virtPage, virtTitle, '', 0)
    } else {
        if (ga) {
            if (window.mainTracker != 'tilda') {
                ga('send', {
                    hitType: 'pageview',
                    page: virtPage,
                    title: virtTitle
                })
            }
        }
        if (window.mainMetrika && window[window.mainMetrika]) {
            window[window.mainMetrika].hit(virtPage, {
                title: virtTitle,
                referer: window.location.href
            })
        }
    }
}

function t390__lazyLoad() {
    var allRecords = document.getElementById('allrecords');
    if (window.lazy === 'y' || (allRecords && allRecords.getAttribute('data-tilda-lazy') === 'yes')) {
        t_onFuncLoad('t_lazyload_update', function() {
            t_lazyload_update()
        })
    }
}

function t668_init(recId) {
    var rec = document.getElementById('rec' + recId);
    if (!rec) return;
    var container = rec.querySelector('.t668');
    if (!container) return;
    var accordion = rec.querySelectorAll('.t668__accordion')[0];
    var headers = rec.querySelectorAll('.t668__header');
    var isLazy = document.getElementById('allrecords').getAttribute('data-tilda-lazy');
    var content = rec.querySelector('.t668__content');
    if (!content) return;
    var accordionScroll;
    var contentStyle = window.getComputedStyle(content, null);
    if (!contentStyle && typeof contentStyle !== 'object') return;
    if (accordion) {
        accordionScroll = accordion.getAttribute('data-scroll-to-expanded');
        accordion = accordion.getAttribute('data-accordion')
    } else {
        accordionScroll = 'false';
        accordion = 'false'
    }
    for (var i = 0; i < headers.length; i++) {
        headers[i].addEventListener('click', function() {
            var element = this;
            var container = element.nextElementSibling;
            var triggerButton = element.querySelector('.t668__trigger-button');
            var activeHeight = 0;
            var isAccordionDown = !1;
            if (triggerButton) {
                var isExpanded = triggerButton.getAttribute('aria-expanded') === 'true';
                triggerButton.setAttribute('aria-expanded', !isExpanded);
                container.hidden = isExpanded
            }
            if (element.classList.contains('t668__opened')) {
                element.classList.remove('t668__opened');
                t668_accordionHide(container)
            } else {
                if (accordionScroll === 'true' && accordion === 'true') {
                    activeHeight = t668__getOldAction(rec);
                    isAccordionDown = t668__getAccordionPosition(headers, element)
                }
                if (accordion === 'true') {
                    t668_accordionAllHide(headers)
                }
                element.classList.add('t668__opened');
                container.style.display = 'block';
                var paddingBottom = Number(contentStyle.paddingBottom.replace('px', ''));
                var height = container.scrollHeight + paddingBottom;
                container.style.maxHeight = '0px';
                setTimeout(function() {
                    container.style.maxHeight = height + 'px';
                    if (accordionScroll === 'true') {
                        t668__calcHeight(element, container, activeHeight, isAccordionDown)
                    }
                }, 0)
            }
            if (window.lazy === 'y' || isLazy === 'yes') {
                t_onFuncLoad('t_lazyload_update', function() {
                    t_lazyload_update()
                })
            }
        })
    }
}

function t668_accordionAllHide(headers) {
    for (var i = 0; i < headers.length; i++) {
        var elementHide = headers[i];
        elementHide.classList.remove('t668__opened');
        t668_accordionHide(elementHide.nextElementSibling)
    }
}

function t668_accordionHide(container) {
    if (!container.style.maxHeight) container.style.maxHeight = container.scrollHeight + 'px';
    setTimeout(function() {
        container.style.maxHeight = 0
    }, 0)
}

function t668__getOldAction(rec) {
    var activeHeader = rec.querySelector('.t668__opened');
    var activeHeight = 0;
    if (activeHeader) var activeContainer = activeHeader.nextElementSibling;
    if (activeContainer) activeHeight = activeContainer.offsetHeight;
    return activeHeight
}

function t668__getAccordionPosition(headers, element) {
    var oldIndex;
    var newIndex;
    for (var i = 0; i < headers.length; i++) {
        var header = headers[i];
        if (header.classList.contains('t668__opened')) oldIndex = i;
        if (header === element) newIndex = i
    }
    return oldIndex < newIndex ? !0 : !1
}

function t668__calcHeight(element, container, activeHeight, isAccordionDown) {
    var windowHeight = window.innerHeight;
    var windowScroll = window.scrollY;
    var containerHeight = container.scrollHeight;
    var accordionHeight = containerHeight + element.offsetHeight;
    var elementTopOffset = element.getBoundingClientRect().top + windowScroll;
    var target = isAccordionDown ? elementTopOffset - activeHeight : elementTopOffset;
    var accordionBottomLine = target + accordionHeight;
    var windowBottomLine = windowScroll + windowHeight;
    if (target < windowScroll || accordionHeight > windowHeight || accordionBottomLine > windowBottomLine) {
        t668__scroll(target)
    }
}

function t668__scroll(target) {
    var duration = 400;
    var start = (window.pageYOffset || document.documentElement.scrollTop) - (document.documentElement.clientTop || 0);
    var change = target - start;
    var currentTime = 0;
    var increment = 16;
    document.body.setAttribute('data-scrollable', 'true');

    function t668__easeInOutCubic(currentTime) {
        if ((currentTime /= duration / 2) < 1) {
            return change / 2 * currentTime * currentTime * currentTime + start
        } else {
            return change / 2 * ((currentTime -= 2) * currentTime * currentTime + 2) + start
        }
    }

    function t668__animateScroll() {
        currentTime += increment;
        window.scrollTo(0, t668__easeInOutCubic(currentTime));
        if (currentTime < duration) {
            setTimeout(t668__animateScroll, increment)
        } else {
            document.body.removeAttribute('data-scrollable')
        }
    }
    t668__animateScroll()
}

function t657_init(recid) {
    var rec = document.querySelector('#rec' + recid);
    if (!rec) return;
    var wrapperBlock = rec.querySelector('.t657');
    var closeButton = rec.querySelector('.t657__btn');
    var closeIcon = rec.querySelector('.t657__icon-close');
    var closeSvg = rec.querySelector('.t657__icon-close svg');
    var storageItem = wrapperBlock.getAttribute('data-storage-item');
    var lastOpen;
    try {
        lastOpen = localStorage.getItem(storageItem)
    } catch (error) {
        console.log('Your web browser does not support localStorage. Error status: ', error)
    }
    if (!lastOpen) {
        wrapperBlock.classList.remove('t657_closed')
    }
    wrapperBlock.addEventListener('click', function(event) {
        if (event.target === closeButton || event.target === closeIcon || event.target === closeSvg) {
            wrapperBlock.classList.add('t657_closed');
            try {
                localStorage.setItem(storageItem, Math.floor(Date.now() / 1000))
            } catch (error) {
                console.log('Your web browser does not support localStorage. Error status: ', error)
            }
            event.preventDefault()
        }
    })
}
window.requestAnimationFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
        window.setTimeout(callback, 1000 / 60)
    }
})();

function t270_scroll(hash, offset) {
    if (!hash) return;
    t270_checkLoad(hash, offset);
    if (hash.indexOf('#!/tproduct/') !== -1 || hash.indexOf('#!/tab/') !== -1) {
        return !0
    }
    var isHistoryChangeAllowed = window.location.hash !== hash;
    var wrapperBlock = document.querySelector('.t270');
    var dontChangeHistory = wrapperBlock ? Boolean(wrapperBlock.getAttribute('data-history-disabled')) : !1;
    t270_scrollToEl(hash, offset);
    if (!dontChangeHistory && isHistoryChangeAllowed) {
        if (history.pushState) {
            history.pushState(null, null, hash)
        } else {
            window.location.hash = hash
        }
        isHistoryChangeAllowed = !1
    }
    return !0
}

function t270_checkLoad(hash, offset) {
    if (window.t270_loadChecked) return;
    var sliderWrappers = document.body.querySelectorAll('.t-slds__items-wrapper');
    if (!sliderWrappers.length) return;
    var lastWrapper = sliderWrappers[sliderWrappers.length - 1];
    var sliderImgs = lastWrapper ? lastWrapper.querySelectorAll('.t-slds__bgimg') : [];
    var lastImg = sliderImgs[sliderImgs.length - 1];
    var imageUrl = lastImg ? window.getComputedStyle(lastImg).backgroundImage : '';
    imageUrl = imageUrl.substring(5, imageUrl.length - 2);
    var preloaderImg = document.createElement('img');
    preloaderImg.src = imageUrl ? imageUrl : '';
    preloaderImg.addEventListener('load', function() {
        t270_scroll(hash, offset);
        window.t270_loadChecked = !0
    })
}

function t270_scrollToEl(hash, offset) {
    if (document.body.getAttribute('data-scroll')) return;
    var scrollTargetY = t270_getTarget(hash, offset);
    if (isNaN(scrollTargetY)) return;
    var body = document.body;
    var canSmoothScroll = window.CSS && window.CSS.supports('scroll-behavior', 'smooth');
    if (window.isMobile && canSmoothScroll && 'scrollBehavior' in document.documentElement.style) {
        body.setAttribute('data-scroll', 'true');
        window.scrollTo({
            left: 0,
            top: scrollTargetY,
            behavior: 'smooth'
        });
        setTimeout(function() {
            body.removeAttribute('data-scroll')
        }, 500)
    } else {
        var html = document.querySelector('html');
        var documentHeight = Math.max(body.scrollHeight, body.offsetHeight, body.clientHeight, html.offsetHeight);
        var scrollY = window.scrollY || document.documentElement.scrollTop;
        var speed = 2000;
        var time = Math.max(.1, Math.min(Math.abs(scrollY - scrollTargetY) / speed, .8));
        var currentTime = 0;

        function t270_easeInQuad(pos) {
            return Math.pow(pos, 2)
        }

        function t270_animationScroll() {
            currentTime += 1 / 60;
            var newDocumentHeight = Math.max(body.scrollHeight, body.offsetHeight, body.clientHeight, html.offsetHeight);
            if (documentHeight < newDocumentHeight) {
                documentHeight = newDocumentHeight;
                scrollTargetY = t270_getTarget(hash, offset);
                scrollY = window.scrollY || document.documentElement.scrollTop;
                time = Math.max(.1, Math.min(Math.abs(scrollY - scrollTargetY) / speed, .8))
            }
            var difference = currentTime / time;
            var animation = t270_easeInQuad(difference);
            if (difference < 1) {
                requestAnimationFrame(t270_animationScroll);
                window.scrollTo(0, scrollY + ((scrollTargetY - scrollY) * animation))
            } else {
                body.removeAttribute('data-scroll');
                body.removeAttribute('data-scrollable');
                window.scrollTo(0, scrollTargetY)
            }
        }
        body.setAttribute('data-scroll', 'true');
        body.setAttribute('data-scrollable', 'true');
        t270_animationScroll()
    }
}

function t270_getTarget(hash, offset) {
    var target;
    try {
        if (hash.substring(0, 1) === '#') {
            target = document.getElementById(hash.substring(1))
        } else {
            target = document.querySelector(hash)
        }
    } catch (event) {
        console.log('Exception t270: ' + event.message);
        return
    }
    if (!target) {
        target = document.querySelector('a[name="' + hash.substr(1) + '"]');
        if (!target) return
    }
    target = parseInt((target.getBoundingClientRect().top + window.pageYOffset) - offset, 10);
    target = Math.max(target, 0);
    return target
}